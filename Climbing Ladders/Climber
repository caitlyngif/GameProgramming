/*
add another box collider to ladder, mark it as isTrigger
there should be two box colliders, one is isTrigger

input going to be simplified down the y-axis, no x or z movement

first box collider not isTrigger

add a component to ladder that marks it as a ladder (Create a new component and make a Ladder script with nothing in it)

add a component to PlayerCapsule called Climber

trigger one should be wider than the normal one, making it shorter is better

*/

// attached to player capsule
using StarterAssets;
using UnityEngine;
[RequireComponent(typeof(ThirdPersonController), typeof(StarterAssetsInputs))]
public class Climber : MonoBehaviour
{

    [SerializeField] ThirdPersonController controller;
    [SerializeField] bool _climbing;
    [SerializeField] StarterAssetsInputs inputManager;
    private void OnValidate()
    {
        inputManager = GetComponent<StarterAssetsInputs>();
        controller = GetComponent<ThirdPersonController>();
    }
    bool climbing
    {
        get => _climbing;
        set
        {
            _climbing = value;
            controller.enabled = !value;
        }
    }
    private void Update()
    {
        if (climbing)
        {
            // var input = inputManager.move;
            var input3D = new Vector3(0, inputManager.move.y, 0);
            transform.position += input3D * Time.deltaTime;
        }
    }
    private void OnTriggerEnter(Collider other)
    {
        Toggle(other, true);
    }

    private void Toggle(Collider other, bool on)
    {
        var ladder = other.GetComponent<Ladder>();
        if (ladder)
        {
            climbing = on;
        }
    }
    private void OnTriggerExit(Collider other)
    {
        Toggle(other, false);
    }
}

/*
Enemies: have a sphere collider, set as trigger
Pellets: set as trigger
remember to apply all

if we hit an enemy, we want to show a new screen

on player, add a script: PacmanTrigger
*/
/*
using UnityEngine;
public class PacmanTrigger : MonoBehaviour {
    [SerializeField] GameObject loseScreen;
    [SerializeField] Image image;
    float powerTimer;
    [SerializeField] float maxPowerTime;
    [SerializeField] bool _poweredUp;
    bool poweredUp
    {
        get => _poweredUp;
        set
        {
            if (value)
            {
                powerTimer = maxPowerTime;
                _poweredUp = value;
            }
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        var powerup = other.GetComponent<Powerup>();
        if (powerup)
        {
            poweredUp = true;
            return;
        }
        var ghost = other.GetComponent<Ghost>();
        if (ghost)
        {
            HandleGhost(ghost);
        }
    }
    private void HandleGhost(Ghost ghost)
    {
        if (poweredUp)
        {
            Destroy(ghost.GameObject);
        }
        else
        {
            loseScreen.SetActive(true);
        }
    }
    private void Update()
    {
        if (powerTimer > 0)
        {
            powerTimer -= powerTimer.deltaTime;
            image.fillAmount = powerTimer / maxPowerTime;
        }
        else
        {
            if (poweredUp)
            {
                poweredUp = false;
                image.fillAmount = 0;
            }
        }
    }
}
*/